"""This script is a bit of a combination of the other scripts in this directory.
.  More specifically,
it will create a .hpp and .cpp file that contain lists of all internal
coordinates and all parameters for that molecule.  Although the actual
algorithms determine and manipulate the actual parameters quite fast, even
for large molcules, having a large number of parameters in a single source
file will be somewhat slow to compile.  It is thus suggested that you only
generate tests for small molecules.
"""
import Tinker2FManIIFxns as Fxns
import math
import os
#Get files that were passed to the script and run analyze (if applicable)
xyz_file,ff_file,corr_answers,mol_name = Fxns.setup()

ff_name=os.path.splitext(ff_file)[0]

#Read from the xyz file the carts, connectivityls, and parameters
carts,connect,param_num=Fxns.read_sys(xyz_file)
#Read from the param file the parameters
atom2tink,parms,rad_rule,rad_type,epsilon_rule,vdw_scale,chg_scale=Fxns.read_ff(ff_file)

#Compute internal coordinates
bonds,bond_k,bond_r0=Fxns.compute_bonds(carts,atom2tink,connect,param_num,parms)
angles,angle_k,angle_r0=Fxns.compute_angles(carts,atom2tink,connect,param_num,parms)
torsions,torsion_v=Fxns.compute_torsions(carts,atom2tink,connect,param_num,parms)
imptorsion,imp_v=Fxns.compute_imp_torsions(carts,atom2tink,connect,param_num,parms)
pairs,chg,vdw=Fxns.compute_pairs(carts,atom2tink,connect,param_num,parms)


#Print .hpp file
f=open(mol_name+".hpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#pragma once\n")
f.write("#include<vector>\n")
f.write("#include<ForceManII/FManII.hpp>\n")
f.write("extern const std::vector<double> "+mol_name+";\n")
f.write("extern const FManII::AtomTypes "+mol_name+"_FF_types;\n")
f.write("extern const FManII::ConnData "+mol_name+"_conns;\n")
for intcorrd in ["_bonds","_angles","_torsions","_imptorsion","_pairs"]:
    f.write("extern const std::vector<double> "+mol_name+intcorrd+";\n")
for pa in ["K","r0","angle_K","angle_r0","torsion_v","imptorsion_v","charge_q"]:
    f.write("extern const std::vector<double> "+mol_name+"_"+pa+";\n")
#Prints energy components
for i in corr_answers:
    f.write("const double "+mol_name+i+"_e="+str(corr_answers[i])+";\n")
f.close()

f=open(mol_name+".cpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#include \""+mol_name+".hpp\"\n")
f.write("#include<ForceManII/FManII.hpp>\n")
f.write("const FManII::AtomTypes "+mol_name+"_FF_types={\n")
for i in param_num:f.write(str(i)+",\n")
f.write("};\n")
Fxns.print_carts(f,mol_name,carts)
Fxns.print_conns(f,mol_name,connect)
Fxns.print_coord(f,mol_name,bonds,"bonds")
Fxns.print_coord(f,mol_name,angles,"angles")
Fxns.print_coord(f,mol_name,torsions,"torsions")
Fxns.print_coord(f,mol_name,imptorsion,"imptorsion")
Fxns.print_coord(f,mol_name,pairs,"pairs")
Fxns.print_sys_parms(f,mol_name,"K",bond_k)
Fxns.print_sys_parms(f,mol_name,"r0",bond_r0)
Fxns.print_sys_parms(f,mol_name,"angle_K",angle_k)
Fxns.print_sys_parms(f,mol_name,"angle_r0",angle_r0)
Fxns.print_sys_parms(f,mol_name,"torsion_v",torsion_v)
Fxns.print_sys_parms(f,mol_name,"imptorsion_v",imp_v)
Fxns.print_sys_parms(f,mol_name,"charge_q",chg)
Fxns.print_sys_parms(f,mol_name,"sigma",vdw[1])
Fxns.print_sys_parms(f,mol_name,"epsilon",vdw[0])



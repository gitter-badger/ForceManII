#This script will take a Tinker XYZ file and a Tinker style force-field
#parameter file and create a C++ header file suitable for inclusion in a FManII
#test case.  If you also specify where Tinker's analyze lives this script will
#attempt to generate the correct answers too
#
import Tinker2FManIIFxns as Fxns
import math
#Get files that were passed to the script and run analyze (if applicable)
xyz_file,ff_file,corr_answers,mol_name = Fxns.setup()

#Read from the xyz file the carts, connectivityls, and parameters
carts,connect,param_num=Fxns.read_sys(xyz_file)
#Read from the param file the parameters
atom2tink,parms=Fxns.read_ff(ff_file)

#Compute internal coordinates
bonds,bond_k,bond_r0=Fxns.compute_bonds(carts,atom2tink,connect,param_num,parms)
angles,angle_k,angle_r0=Fxns.compute_angles(carts,atom2tink,connect,param_num,parms)
torsions,torsion_v=Fxns.compute_torsions(carts,atom2tink,connect,param_num,parms)
imptorsion,imp_v=Fxns.compute_imp_torsions(carts,atom2tink,connect,param_num,parms)

egy=0.0
for i,angle in enumerate(torsions):
    egyi=torsion_v[i]*(1+math.cos(angle))
    print(egyi)
    egy+=egyi
print(egy)

#Print .hpp file
f=open(mol_name+".hpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#pragma once\n")
f.write("#include<vector>\n")
f.write("#include<ForceManII/FManII.hpp>\n")
Fxns.print_carts(f,mol_name,carts)
Fxns.print_types(f,mol_name,param_num,atom2tink)
Fxns.print_conns(f,mol_name,connect)
Fxns.print_coord(f,mol_name,bonds,"bonds")
Fxns.print_coord(f,mol_name,angles,"angles")
Fxns.print_coord(f,mol_name,torsions,"torsions")
Fxns.print_coord(f,mol_name,imptorsion,"imptorsion")
Fxns.print_parms(f,mol_name,parms)
Fxns.print_sys_parms(f,mol_name,"K",bond_k)
Fxns.print_sys_parms(f,mol_name,"r0",bond_r0)
Fxns.print_sys_parms(f,mol_name,"angle_K",angle_k)
Fxns.print_sys_parms(f,mol_name,"angle_r0",angle_r0)
Fxns.print_sys_parms(f,mol_name,"torsion_v",torsion_v)
Fxns.print_sys_parms(f,mol_name,"imptorsion_v",imp_v)


#Prints energy components
for i in corr_answers:
    f.write("const double "+mol_name+i+"_e="+str(corr_answers[i])+";\n")
f.close()

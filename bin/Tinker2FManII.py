#This script will take a Tinker XYZ file and a Tinker style force-field
#parameter file and create a C++ header file suitable for inclusion in a FManII
#test case.  If you also specify where Tinker's analyze lives this script will
#attempt to generate the correct answers too
#
import Tinker2FManIIFxns as Fxns
import math
import os
#Get files that were passed to the script and run analyze (if applicable)
xyz_file,ff_file,corr_answers,mol_name = Fxns.setup()

ff_name=os.path.splitext(ff_file)[0]

#Read from the xyz file the carts, connectivityls, and parameters
carts,connect,param_num=Fxns.read_sys(xyz_file)
#Read from the param file the parameters
atom2tink,parms,rad_rule,rad_type,epsilon_rule,vdw_scale,chg_scale=Fxns.read_ff(ff_file)

#Compute internal coordinates
bonds,bond_k,bond_r0=Fxns.compute_bonds(carts,atom2tink,connect,param_num,parms)
angles,angle_k,angle_r0=Fxns.compute_angles(carts,atom2tink,connect,param_num,parms)
torsions,torsion_v=Fxns.compute_torsions(carts,atom2tink,connect,param_num,parms)
imptorsion,imp_v=Fxns.compute_imp_torsions(carts,atom2tink,connect,param_num,parms)
pairs,chg,vdw=Fxns.compute_pairs(carts,atom2tink,connect,param_num,parms)


#Print .hpp file
f=open(mol_name+".hpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#pragma once\n")
f.write("#include<vector>\n")
f.write("#include<ForceManII/FManII.hpp>\n")
f.write("extern const std::vector<double> "+mol_name+";\n")
f.write("extern const FManII::AtomTypes "+mol_name+"_FF_types;\n")
f.write("extern const FManII::ConnData "+mol_name+"_conns;\n")
for intcorrd in ["_bonds","_angles","_torsions","_imptorsion","_pairs"]:
    f.write("extern const std::vector<double> "+mol_name+intcorrd+";\n")
f.write("extern const FManII::ParamTypes "+mol_name+"_FF_params;\n")
for pa in ["K","r0","angle_K","angle_r0","torsion_v","imptorsion_v","charge_q"]:
    f.write("extern const std::vector<double> "+mol_name+"_"+pa+";\n")
#Prints energy components
for i in corr_answers:
    f.write("const double "+mol_name+i+"_e="+str(corr_answers[i])+";\n")
f.close()

f=open(ff_name+".hpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#pragma once\n")
f.write("#include<ForceManII/FManII.hpp>\n")
Fxns.print_parms(f,ff_name,parms)
f.write("std::set<FManII::IntCoord_t> terms({")
for key,value in parms.items():
    f.write(key+",")
f.write("});\n")
f.write("FManII::ForceField "+ff_name+";\n")
f.write(ff_name+".params="+ff_name+"_params;\n")
f.write(ff_name+".terms=terms;\n")
f.write(ff_name+".chg14scale=1.0/"+str(chg_scale)+";\n")
f.write(ff_name+".combrules[FManII::sigma]=FManII::CombRule_t::"+rad_rule+";\n")
f.write(ff_name+".combrules[FManII::epsilon]=FManII::CombRule_t::"+epsilon_rule+";\n")
f.write(ff_name+".vdw14scale=1.0/"+str(vdw_scale)+";\n")
f.close()



f=open(mol_name+".cpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#include \""+mol_name+".hpp\"\n")
f.write("#include<ForceManII/FManII.hpp>\n")
Fxns.print_carts(f,mol_name,carts)
Fxns.print_types(f,mol_name,param_num,atom2tink)
Fxns.print_conns(f,mol_name,connect)
Fxns.print_coord(f,mol_name,bonds,"bonds")
Fxns.print_coord(f,mol_name,angles,"angles")
Fxns.print_coord(f,mol_name,torsions,"torsions")
Fxns.print_coord(f,mol_name,imptorsion,"imptorsion")
Fxns.print_coord(f,mol_name,pairs,"pairs")
Fxns.print_sys_parms(f,mol_name,"K",bond_k)
Fxns.print_sys_parms(f,mol_name,"r0",bond_r0)
Fxns.print_sys_parms(f,mol_name,"angle_K",angle_k)
Fxns.print_sys_parms(f,mol_name,"angle_r0",angle_r0)
Fxns.print_sys_parms(f,mol_name,"torsion_v",torsion_v)
Fxns.print_sys_parms(f,mol_name,"imptorsion_v",imp_v)
Fxns.print_sys_parms(f,mol_name,"charge_q",chg)
Fxns.print_sys_parms(f,mol_name,"sigma",vdw[1])
Fxns.print_sys_parms(f,mol_name,"epsilon",vdw[0])



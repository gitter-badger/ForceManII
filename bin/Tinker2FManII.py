#This script will take a Tinker XYZ file and a Tinker style force-field
#parameter file and create a C++ header file suitable for inclusion in a FManII
#test case.  If you also specify where Tinker's analyze lives this script will
#attempt to generate the correct answers too
#
usage="Usage: Tinker2FManII.py <path/2/xyz> <path/2/Params> [<path/2/analyze>]"

import os
import sys
import math
import subprocess as sub

def check(cond,msg):
    if not cond: raise RuntimeError(msg)
ang2au=1.889725989
kcalmol2au=1/627.5096
k2au=kcalmol2au/(ang2au**2)
corr_answers={}
#Usage checking and basic info
check(len(sys.argv)>=3,usage)
xyz_file=sys.argv[1];ff_file=sys.argv[2]
check(os.path.isfile(xyz_file),"XYZ file does not exist")
check(os.path.isfile(ff_file),"Param file does not exit")
if len(sys.argv)==4:
    xyz_fp=os.path.abspath(sys.argv[1])
    ff_fp=os.path.abspath(sys.argv[2])
    anal_fp=os.path.abspath(sys.argv[3])
    check(os.path.isfile(anal_fp) and os.access(anal_fp,os.X_OK),
          "analyze does note exist or is not executable")
    p=sub.Popen([anal_fp,xyz_fp,ff_fp,"E"],stdout=sub.PIPE)
    for line in p.stdout:
        da_line=line.split()
        if len(da_line)<=1:continue
        if da_line[0].decode('UTF-8')=="Bond":
            corr_answers["bond"]=float(da_line[2].decode('UTF-8'))*kcalmol2au
mol_name=os.path.splitext(os.path.basename(xyz_file))[0]

#Read in connectivity and atoms
carts=[];connect=[];param_num=[]
with open(xyz_file,"r") as f:
    next(f)
    for line in f:
        tokenized=line.split()
        carts.append([float(i) for i in tokenized[2:5]])
        param_num.append(int(tokenized[5]))
        connect.append([int(i)-1 for i in tokenized[6:]])#Tinker starts at 1

#Read in force-field
atom2tink={};bond_parms={}
with open(ff_file,"r") as f:
    for line in f:
        da_line=line.split()
        if len(da_line)<1:continue
        if da_line[0]=="atom":atom2tink[int(da_line[1])]=int(da_line[2])
        if da_line[0]=="bond":
           i=int(da_line[1]);j=int(da_line[2])
           pair=(i,j) if i<=j else (j,i)
           #Tinker bakes the 1/2 into k already
           bond_parms[pair]=[2*float(da_line[3]),float(da_line[4])]#k,r_0

#Compute bond displacements
bonds=[];bond_k=[]
for i,r in enumerate(carts):
    for j in connect[i]:
       if j<i: continue #Only count bonds once
       ip=atom2tink[param_num[i]];jp=atom2tink[param_num[j]]#Map 2 tinker type
       pair=(ip,jp) if ip<=jp else (jp,ip)
       if not pair in bond_parms:
           print("No parameters for bond: "+str(pair))
           continue 
       rij=math.sqrt(sum([(r[k]-carts[j][k])**2 for k in range(0,3)]))
       bonds.append((rij-bond_parms[pair][1])*ang2au)
       bond_k.append(bond_parms[pair][0]*k2au)

#Print file
f=open(mol_name+".hpp","w")
f.write("//This file is autogenerated from Tink2FManII.py\n\n")
f.write("#ifndef "+mol_name.upper()+"_HPP_\n")
f.write("#define "+mol_name.upper()+"_HPP_\n")
f.write("#include<vector>\n")
f.write("const std::vector<double> "+mol_name.lower()+"_bonds={\n")
for i in bonds[:-1]:f.write(str(i)+",\n")
f.write(str(bonds[-1])+"};\n\n")
f.write("const std::vector<double> "+mol_name.lower()+"_ks={\n")
for i in bond_k[:-1]:f.write(str(i)+",\n")
f.write(str(bond_k[-1])+"};\n\n")
for i in corr_answers:
    f.write("const double "+mol_name+i+"_e="+str(corr_answers[i])+"\n")
f.write("#endif\n")
f.close()

from FManII import *

def compute_bonds(carts,connect):
    bonds=[]
    for i,r in enumerate(carts):
        for j in connect[i]:
            if j<i: continue #Only count bonds once
            bonds.append(mag(diff(r,carts[j])))
    return bonds

def angle(ri,rj,n):
    cosphi=dot(ri,rj)/(mag(ri)*mag(rj))
    sinphi=dot(cross(ri,rj),n)/(mag(ri)*mag(rj)*mag(n))
    return math.atan2(sinphi,cosphi)

def compute_angles(carts,connect):
    angles=[];
    for i,ri in enumerate(carts):
        for j in connect[i]:
            rj=carts[j]
            for k in connect[j]:
                if k<=i:continue
                rk=carts[k]
                rij,rjk=diff(ri,rj),diff(rk,rj)
                costheta=dot(rij,rjk)/(mag(rij)*mag(rjk))
                angles.append(math.acos(costheta))
    return angles

def tor_common(ri,rj,rk,rl):
    r21,r23,r34=diff(ri,rj),diff(rj,rk),diff(rl,rk)
    n1,n2=cross(r21,r23),cross(r34,r23)
    return angle(n1,n2,r23)

def compute_torsions(carts,connect):
    torsions=[]
    for i,ri in enumerate(carts):
        for j in connect[i]:
            rj=carts[j]
            for k in connect[j]:
                if k==i:continue
                if k<j:continue
                rk=carts[k]
                for l in connect[k]:
                    if l==j:continue
                    rl=carts[l]
                    torsions.append(tor_common(ri,rj,rk,rl))
    return torsions
def compute_imp_torsions(carts,connect):
    torsions=[];stdv=[]
    for i,ri in enumerate(carts):
        for j in connect[i]:
            if len(connect[j])!=3:continue
            rj=carts[j]
            for k in connect[j]:
                if k<=i:continue
                rk=carts[k]
                for l in connect[j]:
                    if l<=k:continue
                    rl=carts[l]
                    phis=[
                        tor_common(ri,rj,rk,rl),
                        tor_common(rk,rj,rl,ri),
                        tor_common(rl,rj,ri,rk)
                    ]


                    torsions.append(abs(sum(phis)/3.0))
    return torsions

def compute_pairs(carts,connect):
    pairs14,pairs=[],[]
    all_12_pairs,all_13_pairs,all_14_pairs=set(),set(),set()
    for i,r in enumerate(carts):
        for j in connect[i]:
            for k in connect[j]:
                if k==i:continue
                for l in connect[k]:
                    if l==j:continue
                    if l<i: continue
                    if l in connect[i]:continue
                    all_14_pairs.add((i,l))
                if k<i:continue
                all_13_pairs.add((i,k))
            if j<i:continue
            all_12_pairs.add((i,j))
    for i,ri in enumerate(carts):
        for j in range(i+1,len(carts)):
            is12=(i,j) in all_12_pairs
            is13=(i,j) in all_13_pairs
            is14=(i,j) in all_14_pairs
            if is12 or is13:continue
            magrij=mag(diff(ri,carts[j]))
            pairs14.append(magrij) if is14 else pairs.append(magrij)
    return pairs14,pairs


def main():
    if len(sys.argv) !=2:
        raise RuntimeError("Usage: python3 FindIntCoords.py <xyz_file>")
    xyz_file=sys.argv[1];
    if not os.path.isfile(xyz_file):
        raise RuntimeError("Coordinate file does not exist")
    carts,connect,param_num=read_sys(xyz_file)
    mol_name=os.path.splitext(xyz_file)[0]
    coords={}
    coords["bond"]=compute_bonds(carts,connect)
    coords["angle"]=compute_angles(carts,connect)
    coords["torsion"]=compute_torsions(carts,connect)
    coords["imp"]=compute_imp_torsions(carts,connect)
    coords["pair14"],coords["pair"]=compute_pairs(carts,connect)

    ob_type="const std::map<std::string,FManII::Vector>"
    f=open(mol_name+"_intcoords.hpp","w")
    f.write("//This file is autogenerated from FindIntCoordsFF.py\n\n")
    f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
    f.write("#pragma once\n")
    f.write("#include<ForceManII/FManII.hpp>\n")
    f.write("extern "+ob_type+" "+mol_name+"_qs;\n")
    f.close()

    f=open(mol_name+"_intcoords.cpp","w")
    f.write("//This file is autogenerated from FindIntCoordsFF.py\n\n")
    f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
    f.write("#include<ForceManII/FManII.hpp>\n")
    f.write("#include \""+mol_name+"_intcoords.hpp\"\n")
    f.write(ob_type+" "+mol_name+"_qs={\n")
    for key,value in coords.items():
        f.write("{"+intcoords[key]+",{\n")
        for qi in value:
            f.write(str(qi)+",\n")
        f.write("}},\n")
    f.write("};\n")
    f.close()


if __name__ == "__main__":
    main()

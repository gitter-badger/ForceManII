"""Given an .xyz in Tinker format, this script will assemble the .hpp and .cpp
   files for the system so that the coordinates, connectivity, parameter types,
   and energies are in a format suitable for testing.  The energies will be in
   the .hpp file, the coordinates and connectivity in <mol_name>.cpp
"""
import sys
import os
import subprocess as sub
kcalmol2au=1/627.5096
ang2au=1.889725989

def parse_egy(da_line,Term,term,col,corr_answers):
    if da_line[0].decode('UTF-8')==Term:
        corr_answers[term]=float(da_line[col].decode('UTF-8'))*kcalmol2au

def get_egys(anal_fp,xyz_fp,ff_fp):
    corr_answers={}
    p=sub.Popen([anal_fp,xyz_fp,ff_fp,"E"],stdout=sub.PIPE)
    for line in p.stdout:
        da_line=line.split()
        if len(da_line)<=1:continue
        parse_egy(da_line,"Bond","bond",2,corr_answers)
        parse_egy(da_line,"Angle","angle",2,corr_answers)
        parse_egy(da_line,"Torsional","torsion",2,corr_answers)
        parse_egy(da_line,"Improper","improper",2,corr_answers)
        parse_egy(da_line,"Van","vdw",3,corr_answers)
        parse_egy(da_line,"Charge-Charge","electrostatics",1,corr_answers)
    return corr_answers

if len(sys.argv)!=4:
    raise RuntimeException("Usage: MakeTest.py <xyz> <prm> <path/2/analyze>")
xyz_file=sys.argv[1];ff_file=sys.argv[2]
xyz_fp=os.path.abspath(sys.argv[1])
ff_fp=os.path.abspath(sys.argv[2])
anal_fp=os.path.abspath(sys.argv[3])
if not os.path.isfile(xyz_file):
    raise RuntimeException("XYZ file does not exist")
if not os.path.isfile(ff_file):
    raise RuntimeException("Param file does not exit")
if not (os.path.isfile(anal_fp) and os.access(anal_fp,os.X_OK)):
    raise RuntimeException("analyze does note exist or is not executable")
corr_answers=get_egys(anal_fp,xyz_fp,ff_fp)
carts=[];connect=[];param_num=[]
mol_name=os.path.splitext(os.path.basename(xyz_file))[0]
with open(xyz_file,"r") as f:
    next(f)
    for line in f:
        tokenized=line.split()
        carts.append([float(i)*ang2au for i in tokenized[2:5]])
        param_num.append(int(tokenized[5]))
        connect.append([int(i)-1 for i in tokenized[6:]])#Tinker starts at 1

f=open(mol_name+".hpp","w")
f.write("//This file is autogenerated from MakeTest.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#pragma once\n")
f.write("#include<vector>\n")
f.write("#include<ForceManII/FManII.hpp>\n")
f.write("extern const FManII::Vector "+mol_name+";\n")
f.write("extern const FManII::IVector "+mol_name+"_FF_types;\n")
f.write("extern const FManII::ConnData "+mol_name+"_conns;\n")
for i in corr_answers:
    f.write("const double "+mol_name+i+"_e="+str(corr_answers[i])+";\n")
f.close()

f=open(mol_name+".cpp","w")
f.write("//This file is autogenerated from MakeTest.py\n\n")
f.write("//If you value your sanity do not try to manually edit it!!!\n\n")
f.write("#include \""+mol_name+".hpp\"\n")
f.write("#include<ForceManII/FManII.hpp>\n")
f.write("const FManII::IVector "+mol_name+"_FF_types={\n")
for i in param_num:f.write(str(i)+",\n")
f.write("};\n")
f.write("const FManII::ConnData "+mol_name.lower()+"_conns={\n")
for i in connect:
    f.write("{")
    for j in i:f.write(str(j)+",")
    f.write("},\n")
f.write("};\n")
f.write("const FManII::Vector "+mol_name.lower()+"={\n")
for i in carts:f.write(str(i[0])+","+str(i[1])+","+str(i[2])+",\n")
f.write("};\n\n")
f.close()
